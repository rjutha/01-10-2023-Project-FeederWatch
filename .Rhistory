else if(as.integer(factor(start_month[[i]][j], levels = month.name)) > as.integer(factor(end_month[[i]][j], levels = month.name))){
start_year[[i]][j] = end_year[[i]][j] - 1
}
else{
start_year[[i]][j] = end_year[[i]][j]
}
}
}
# Combine the start and end dates
start_date_clean <- end_year %>% lapply(replace, values = NA)
for (i in 1:length(start_date_clean)) {
for(j in 1:lengths(start_date_clean)[i]){
start_date_clean[[i]][j] <- paste(
start_month[[i]][j],
start_day[[i]][j],
start_year[[i]][j])
}
}
end_date_clean <- end_year %>% lapply(replace, values = NA)
for (i in 1:length(end_date_clean)) {
for(j in 1:lengths(end_date_clean)[i]){
end_date_clean[[i]][j] <- paste(
end_month[[i]][j],
end_day[[i]][j],
end_year[[i]][j])
}
}
# Change tera-type to random
tera_type[[length(tera_type)]]
# Change tera-type to random
tera_type[[length(tera_type)]] <- "Random"
tera_type
# Change tera-type to random
tera_type[[length(tera_type)]][1] <- NULL
# Change tera-type to random
tera_type[[length(tera_type)]][1] <- NULL
tera_type[[length(tera_type)]]
tera_type[[length(tera_type)]][1]
tera_type[[length(tera_type)]][2]
tera_type[[length(tera_type)]][1]
# Change tera-type to random
tera_type[[length(tera_type)]]
# Change tera-type to random
tera_type[[length(tera_type)]] <- "Random"
library(tidyverse) #data and string manipulation
library(rvest) # html functions for scraping
library(janitor)# clean names of a dataframe
library(jsonlite) # to convert a dataframe to .json and save it
library(klippy)# inserts clipboard buttons to RMarkdown
klippy() # inserts clipboard buttons to RMarkdown
url <- "https://www.serebii.net/scarletviolet/teraraidbattleevents.shtml"
url_html <- read_html(url)
# Output when the information was last scraped.
print(Sys.time())
# Used Selector Gadget tool to find what I needed
css_selector <- ".foocontent , h2"
html_text <-
url_html %>%
html_elements(css = css_selector) %>%
html_text2()
event_name <-
html_text %>%
"["(seq(1, length(html_text), 2))
# list of pokemon names using pokemon info downloaded from https://pokemondb.net/tools/text-list
# combine forms and pokemon into one column and do a check for the names
pokemon_info <- read_csv("pokemon_info.csv") %>%
clean_names() %>%
mutate(pokemon_name = case_when(
!(is.na(form)) ~ paste(name,form),
is.na(form) ~ name
)) %>%
pull(pokemon_name)
event_split <-
html_text %>% "["(seq(1, length(html_text), 2)) %>%
str_split(" ")
pokemon_name <- list()
for (i in 1:length(event_split)) {
cc <- c()
for(j in 1:lengths(event_split)[i]){
if(event_split[[i]][j] %in% pokemon_info){
cc <- append(cc, event_split[[i]][j])
}
}
pokemon_name[[i]] <- cc
}
description <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_replace(regex(".*\\n\\n\\n", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r \\r.*", dotall = T), "")
# Assume the only digits present in the description are for the number of stars
star <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_match(".*Star") %>%
str_match("[[:digit:]].*") %>%
str_replace(" Star.*", "") %>%
str_replace(" and ", ",") %>%
str_replace(" to ", ":") %>%
paste0("c(", ., ")") %>%
parse(text = .) %>%
as.list() %>%
lapply(eval)
# Assumes that the only types mentioned in the description are the tera types and if no types are mentioned its assumed to be Random
types <-
read_csv("pokemon_info.csv") %>%
clean_names %>%
pull(type_1) %>%
unique()
description_split <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_split(" ") %>%
str_split("[[:punct:]]")
tera_type <- list()
for (i in 1:length(description_split)) {
cc <- c()
for(j in 1:lengths(description_split)[i]){
if(description_split[[i]][j] %in% types){
cc <- append(cc, description_split[[i]][j])
}
}
tera_type[[i]] <- cc
}
tera_type <- tera_type %>%
replace(.=="NULL", "Random")
# Since information is needed we store the day month and year separetly and impute the missing information using logic
# As a result we assume events don't that over a year.
# This is a fair assumption since the events so far last 3 days over a weekend
start_date <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_match_all("Global:(.*?)[[:space:]](.*?)[[:space:]]") %>%
lapply(function(x) x[,1]) %>%
lapply(str_replace, pattern = "Global:", replacement = "") %>%
lapply(str_squish)
end_date <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_match_all("Global:(.*?)- (.*?)\\n") %>%
lapply(function(x) x[,1]) %>%
lapply(str_replace, pattern = ".*- ", replacement = "") %>%
lapply(str_replace, pattern = "\n", replacement = "")
start_day <- start_date %>% lapply(parse_number)
start_month <- start_date %>% lapply(str_match, pattern = ".*[[:space:]]") %>% lapply(str_squish)
end_day <- end_date %>% lapply(parse_number)
end_year <- end_date %>% lapply(str_match, "[[:digit:]]{4}") %>% lapply(parse_number)
# for end month logic
# if different information is in end_date
# if its NA then it is the same as start month
end_month <- end_date %>% lapply(str_match, "[[:alpha:]]{3,}")
for (i in 1:length(end_month)) {
for(j in 1:lengths(end_month)[i]){
if(is.na(end_month[[i]][j])){
end_month[[i]][j] = start_month[[i]][j]
}
}
}
# start year logic
# if months are the same then year is the same (assumption)
# if month are different then it could be the same year or the last year
# subtract from end_month and if it rolls back to the previous year than assume previous year
# convert months to numeric using factors
# !!! assumes events don't last for more than a year !!!
# Probably a fair assumption since events seem to last for days on weekends so far.
start_year <- end_year %>% lapply(replace, values = NA)
for (i in 1:length(start_year)) {
for(j in 1:lengths(start_year)[i]){
if(start_month[[i]][j] == end_month[[i]][j]){
start_year[[i]][j] = end_year[[i]][j]
}
else if(as.integer(factor(start_month[[i]][j], levels = month.name)) > as.integer(factor(end_month[[i]][j], levels = month.name))){
start_year[[i]][j] = end_year[[i]][j] - 1
}
else{
start_year[[i]][j] = end_year[[i]][j]
}
}
}
# Combine the start and end dates
start_date_clean <- end_year %>% lapply(replace, values = NA)
for (i in 1:length(start_date_clean)) {
for(j in 1:lengths(start_date_clean)[i]){
start_date_clean[[i]][j] <- paste(
start_month[[i]][j],
start_day[[i]][j],
start_year[[i]][j])
}
}
end_date_clean <- end_year %>% lapply(replace, values = NA)
for (i in 1:length(end_date_clean)) {
for(j in 1:lengths(end_date_clean)[i]){
end_date_clean[[i]][j] <- paste(
end_month[[i]][j],
end_day[[i]][j],
end_year[[i]][j])
}
}
# Change tera-type to random
tera_type[[length(tera_type)]] <- "Random"
# Change the number of stars to 1 to 5
star[[length(star)]] <- 1:5
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0)
data
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0) %>%
mutate(tera_type = unlist(tera_type))
View(data)
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0) %>%
mutate(tera_type = unlist(tera_type)) %>%
mutate(tera_type = case_when(
tera_type == "Random" ~ NULL,
TRUE ~ tera_type
))
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0) %>%
mutate(tera_type = unlist(tera_type)) %>%
mutate(tera_type = case_when(
tera_type == "Random" ~ NA,
TRUE ~ tera_type
))
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0) %>%
mutate(tera_type = unlist(tera_type)) %>%
mutate(tera_type = case_when(
tera_type == "Random" ~ NA,
TRUE ~ tera_type
))
# Adding duplicate columns and naming as requested
data <- tibble(
event_name = event_name,
name = pokemon_name,
description = description,
star = star,
tera_type = tera_type,
start_date = start_date_clean,
end_date = end_date_clean
) %>%
unnest_longer(name) %>%
mutate(value = 0) %>%
mutate(tera_type = unlist(tera_type)) %>%
mutate(tera_type = case_when(
tera_type == "Random" ~ as.character(NA),
TRUE ~ tera_type
))
data
updated_data <-
data %>%
left_join(pokemon_types, by=c("name"="pokemon_name")) %>%
nest(type = c(type_1,type_2)) %>%
mutate(type = type %>%
lapply(unlist) %>%
lapply(unname) %>%
lapply(na.omit)
)
pokemon_types
# add pokemons type
pokemon_types <- read_csv("pokemon_info.csv") %>%
clean_names() %>%
mutate(pokemon_name = case_when(
!(is.na(form)) ~ paste(name,form),
is.na(form) ~ name
)) %>%
select(pokemon_name, type_1, type_2, )
updated_data <-
data %>%
left_join(pokemon_types, by=c("name"="pokemon_name")) %>%
nest(type = c(type_1,type_2)) %>%
mutate(type = type %>%
lapply(unlist) %>%
lapply(unname) %>%
lapply(na.omit)
)
# json file for debugging and easier viewing
write_json(updated_data, file("Tera_Raid_Battle_Events_pretty.json"), pretty = TRUE)
# json file for debugging and easier viewing
write_json(updated_data, file("Tera_Raid_Battle_Events_pretty.json"), null="null", pretty = TRUE)
# json file for debugging and easier viewing
write_json(updated_data, file("Tera_Raid_Battle_Events_pretty.json"),  na="null", pretty = TRUE)
# json file for debugging and easier viewing
write_json(updated_data, file("Tera_Raid_Battle_Events_pretty.json"), na=TRUE, pretty = TRUE)
description <-
html_text
description <-
html_text %>%
"["(seq(2, length(html_text), 2))
description
description <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_replace(regex(".*\\n\\n\\n", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r \\r.*", dotall = T), "")
description
description <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_replace(regex(".*\\n\\n\\n", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r \\r.*", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r\\n\\n.*"))
description <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_replace(regex(".*\\n\\n\\n", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r \\r.*", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r\\n\\n.*"), dotall = T, "")
description <-
html_text %>%
"["(seq(2, length(html_text), 2)) %>%
str_replace(regex(".*\\n\\n\\n", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r \\r.*", dotall = T), "") %>%
str_replace(regex("\\n\\n\\r\\n\\n.*", dotall = T), "")
description
# Add a period to the end of the description
description[length(description)] <- paste0(description[length(description)], ".")
description
# Change column names and add duplicate column as per requested
updated_data <- data %>%
mutate(value = 1:n()) %>%
rename(name = pokemonName)
library(tidyverse) #data and string manipulation
library(rvest) # html functions for scraping
library(janitor)# clean names of a dataframe
library(jsonlite) # to convert a dataframe to .json and save it
library(klippy)# inserts clipboard buttons to RMarkdown
klippy() # inserts clipboard buttons to RMarkdown
url <- "https://www.serebii.net/scarletviolet/teraraidbattles.shtml"
url_html <- read_html(url)
# Output when the information was last scraped.
print(Sys.time())
# Used Selector Gadget tool to find what I needed
xpath <- "#content > main > table:nth-child(13)"
raw_table <-
url_html %>%
html_nodes(xpath = "//*[@id=\"content\"]/main/table[2]") %>%
html_table() %>%
"[["(1)
head(raw_table)
# Row 1 contains the column names
# We only need the name which is in the X3 column and
# the star raid value which is in X5
# looks like every second row is an NA columns as well
data_raw <-
raw_table %>%
na.omit() %>%
select(X3,X5) %>%
rename(pokemonName = X3, star = X5) %>%
# Next we need to clean the columns
# pokemonName has duplicates and need to be replaced by form names.
# star needs to parsed so it has the numbers in a list
mutate(
star = str_match_all(star, "[[:digit:]]") %>%
lapply(as.numeric)
)
# pokemonName has duplicates and need to be replaced by form names.
# Pokemon that need to be changed:
# Tauros -> Combat Breed (Fighting), Blaze Breed (Fire), Aqua Breed ( Water)
# Shellos -> East Sea Form, West Sea Form
# Gastrodon -> East Sea Form, West Sea Form
# Lycanroc -> Midnight Form, Midday Form, Dusk Form
# Toxtricity -> Male, Female
# Indeedee -> Male, Female
# Oinkologne -> Male, Female
# Maushold -> Family of Three, Family of Four
# Tatsugiri -> Curly Form, Droopy Form, Stretch Form
# update these using a lookup table in the order they appear in the table in a loop
form_lookup <-
list(
c("Tauros", "Combat Breed", "Blaze Breed", "Aqua Breed"),
c("Shellos", "East Sea Form", "West Sea Form"),
c("Gastrodon", "East Sea Form", "West Sea Form"),
c("Lycanroc", "Midnight Form", "Midday Form", "Dusk Form"),
c("Toxtricity", "Amped Form", "Low Key Form"),
c("Indeedee", "Male", "Female"),
c("Oinkologne", "Male", "Female"),
c("Maushold", "Family of Three", "Family of Four"),
c("Tatsugiri", "Curly Form", "Droopy Form", "Stretch Form")
)
pokemon_name <- data_raw %>% pull(pokemonName)
for(i in 1:length(form_lookup)){
for(j in 2:length(form_lookup[[i]])){
index <- min(which(pokemon_name == form_lookup[[i]][1]))
pokemon_name[index] = paste(form_lookup[[i]][1], form_lookup[[i]][j])
}
}
data_raw_1 <- data_raw %>%
mutate(pokemonName = pokemon_name)
# list of pokemon names using pokemon info downloaded from https://pokemondb.net/tools/text-list
# combine forms and pokemon into one column and do a check for the names
pokemon_info <-
read_csv("pokemon_info.csv", show_col_types = FALSE) %>%
clean_names() %>%
mutate(pokemon_name = case_when(
!(is.na(form)) ~ paste(name,form),
is.na(form) ~ name
)) %>%
nest(type = c(type_1,type_2)) %>%
select(pokemon_name, type) %>%
mutate(type = type %>%
lapply(unlist) %>%
lapply(unname) %>%
lapply(na.omit)
)
# Join the tables and manually put add information that the table had trouble adding.
data <-
data_raw_1 %>%
left_join(pokemon_info, by = c("pokemonName"="pokemon_name")) %>%
mutate(type = case_when(
pokemonName == "Shellos East Sea Form" ~ list(c("Water")),
pokemonName == "Shellos West Sea Form" ~ list(c("Water")),
pokemonName == "Gastrodon East Sea Form" ~ list(c("Water","Ground")),
pokemonName == "Gastrodon West Sea Form" ~ list(c("Water","Ground")),
pokemonName == "Basculin" ~ list(c("Water")),
pokemonName == "Oricorio" ~ list(c("Fire","Flying")),
pokemonName == "Eiscue" ~ list(c("Ice")),
pokemonName == "Squawkabilly" ~ list(c("Normal", "Flying")),
pokemonName == "Palafin" ~ list(c("Water")),
pokemonName == "Tatsugiri Curly Form" ~ list(c("Dragon","Water")),
pokemonName == "Tatsugiri Droopy Form" ~ list(c("Dragon","Water")),
pokemonName == "Tatsugiri Stretch Form" ~ list(c("Dragon","Water")),
pokemonName == "Dudunsparce" ~ list(c("Normal")),
TRUE ~ type
))
# Change column names and add duplicate column as per requested
updated_data <- data %>%
mutate(value = 1:n()) %>%
rename(name = pokemonName)
updated_data
# json file for debugging and easier viewing
write_json(updated_data, file("Tera_Raid_Battle_Static_pretty.json"), pretty = TRUE)
PFW_2021_public <- readr::read_csv("https://clo-pfw-prod.s3.us-west-2.amazonaws.com/data/PFW_2021_public.csv")
dplyr::glimpse(PFW_2021_public)
set.seed(424242)
PFW_2021_public_subset <- dplyr::slice_sample(PFW_2021_public, n = 1e5)
readr::write_csv(PFW_2021_public_subset, here::here("data", "2023", "2023-01-10", "PFW_2021_public.csv
)
)
)
)
readr::write_csv(PFW_2021_public_subset, here::here("data", "2023", "2023-01-10", "PFW_2021_public.csv"))
setwd("~/R Projects/Tidy Tuesday/01-10 Project FeederWatch")
readr::write_csv(PFW_2021_public_subset, here::here("data", "PFW_2021_public.csv"))
setwd("~/R Projects/Tidy Tuesday/01-10 Project FeederWatch")
readr::write_csv(PFW_2021_public_subset, here::here("data", "PFW_2021_public.csv"))
here("data", "PFW_2021_public.csv")
here::here("data", "PFW_2021_public.csv")
readr::write_csv(PFW_2021_public_subset, "data/PFW_2021_public.csv")
readr::write_csv(PFW_2021_public_subset, "data/PFW_2021_public.csv")
library(tidyverse)
read_csv("data/PFW_2021_public.csv")
data <- read_csv("data/PFW_2021_public.csv")
glimpse(data)
install.packages("skimr")
library(skimr)
skim(data)
skim(data)
data %>%
ggplot(aes(x = latitude, y = longitude)) +
geom_point()
canada_raw <- readOGR(dsn = "data/gcd_000b11a_e", layer = "gcd_000b11a_e",
use_iconv=TRUE, encoding="CP1250")
